// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/all/user/login": {
            "post": {
                "description": "This endpoint logs in a user by checking the credentials and generating JWT tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User Login Data",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens",
                        "schema": {
                            "$ref": "#/definitions/user.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/all/user/refresh": {
            "post": {
                "description": "it generates new access token",
                "tags": [
                    "all"
                ],
                "summary": "Refresh token",
                "parameters": [
                    {
                        "description": "enough",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.Tokens"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "tokens",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid date",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error while reading from server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/groups/add-student": {
            "post": {
                "description": "This endpoint allows adding a student to a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Add student to group",
                "parameters": [
                    {
                        "description": "Student addition request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.AddStudentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful student addition",
                        "schema": {
                            "$ref": "#/definitions/group.AddStudentResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/add-teacher": {
            "post": {
                "description": "This endpoint allows adding a teacher to a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Add teacher to group",
                "parameters": [
                    {
                        "description": "Teacher addition request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.AddTeacherReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful teacher addition",
                        "schema": {
                            "$ref": "#/definitions/group.AddTeacherResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/create": {
            "post": {
                "description": "This endpoint is used to create a new group in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Create a new group",
                "parameters": [
                    {
                        "description": "Group creation request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.CreateGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group creation",
                        "schema": {
                            "$ref": "#/definitions/group.CreateGroupResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/delete": {
            "delete": {
                "description": "This endpoint is used to delete a group from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Delete a group",
                "parameters": [
                    {
                        "description": "Group deletion request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.GroupId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group deletion",
                        "schema": {
                            "$ref": "#/definitions/group.DeleteResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/delete-student": {
            "delete": {
                "description": "This endpoint allows deleting a student from a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Delete student from group",
                "parameters": [
                    {
                        "description": "Student deletion request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.DeleteStudentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful student deletion",
                        "schema": {
                            "$ref": "#/definitions/group.DeleteResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/delete-teacher": {
            "delete": {
                "description": "This endpoint allows deleting a teacher from a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Delete teacher from group",
                "parameters": [
                    {
                        "description": "Teacher deletion request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.DeleteTeacherReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful teacher deletion",
                        "schema": {
                            "$ref": "#/definitions/group.DeleteResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/getAll": {
            "get": {
                "description": "This endpoint retrieves all groups with optional filters like room and subject.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get all groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Room filter",
                        "name": "room",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Subject ID filter",
                        "name": "subject_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group retrieval",
                        "schema": {
                            "$ref": "#/definitions/group.GetAllGroupsResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/getById": {
            "get": {
                "description": "This endpoint retrieves the details of a group by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get group by ID",
                "parameters": [
                    {
                        "description": "Group ID request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.GroupId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group retrieval",
                        "schema": {
                            "$ref": "#/definitions/group.Group"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/student-groups": {
            "get": {
                "description": "This endpoint retrieves the list of groups a specific student belongs to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get student groups",
                "parameters": [
                    {
                        "description": "Student ID",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.StudentId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of student groups",
                        "schema": {
                            "$ref": "#/definitions/group.StudentGroups"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/students": {
            "get": {
                "description": "This endpoint retrieves the list of students in a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get students of a group",
                "parameters": [
                    {
                        "description": "Group ID",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.GroupId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of group students",
                        "schema": {
                            "$ref": "#/definitions/group.GroupStudents"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/teacher-groups": {
            "get": {
                "description": "This endpoint retrieves the list of groups a specific teacher belongs to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get teacher groups",
                "parameters": [
                    {
                        "description": "Teacher ID",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.TeacherId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of teacher groups",
                        "schema": {
                            "$ref": "#/definitions/group.TeacherGroups"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/update": {
            "put": {
                "description": "This endpoint is used to update the details of an existing group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing group",
                "parameters": [
                    {
                        "description": "Group update request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.UpdateGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group update",
                        "schema": {
                            "$ref": "#/definitions/group.UpdateGroupResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/user/all": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all users with optional filters such as role, group, subject, teacher, and pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role to filter by",
                        "name": "Role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group to filter by",
                        "name": "Group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Subject to filter by",
                        "name": "Subject",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Teacher ID to filter by",
                        "name": "Teacher",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Unique household ID to filter by",
                        "name": "HhId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Phone number to filter by",
                        "name": "PhoneNumber",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Gender to filter by",
                        "name": "Gender",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of users to return per page",
                        "name": "Limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "Offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved users",
                        "schema": {
                            "$ref": "#/definitions/user.GetAllUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks a user profile as deleted by setting the deleted_at timestamp.",
                "tags": [
                    "user"
                ],
                "summary": "Delete User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/getprofile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves user profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.GetProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new user",
                "tags": [
                    "user"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User info",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/update": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update User Profile by Admin",
                "tags": [
                    "user"
                ],
                "summary": "Update User by Admin",
                "parameters": [
                    {
                        "description": "info",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateProfileAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/updateprofile": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update User profile",
                "tags": [
                    "user"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "description": "info",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/products/photo/{product_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete Product Photo",
                "tags": [
                    "user"
                ],
                "summary": "DeleteUserPhoto",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/photo": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload User Photo",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "user"
                ],
                "summary": "UploadPhotoToUser",
                "parameters": [
                    {
                        "type": "file",
                        "description": "UploadMediaForm",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "group.AddStudentReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "student_hh_id": {
                    "type": "string"
                }
            }
        },
        "group.AddStudentResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "group.AddTeacherReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "teacher_id": {
                    "type": "string"
                }
            }
        },
        "group.AddTeacherResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "group.CreateGroupReq": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "room": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "group.CreateGroupResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "group.DeleteResp": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "group.DeleteStudentReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "student_hh_id": {
                    "type": "string"
                }
            }
        },
        "group.DeleteTeacherReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "teacher_id": {
                    "type": "string"
                }
            }
        },
        "group.GetAllGroupsResp": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/group.Group"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                }
            }
        },
        "group.Group": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "room": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "subject_id": {
                    "type": "string"
                },
                "teacher_id": {
                    "type": "string"
                }
            }
        },
        "group.GroupId": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "group.GroupStudents": {
            "type": "object",
            "properties": {
                "students": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/group.Student"
                    }
                }
            }
        },
        "group.Student": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "hh_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "group.StudentGroups": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/group.Group"
                    }
                }
            }
        },
        "group.StudentId": {
            "type": "object",
            "properties": {
                "hh_id": {
                    "type": "string"
                }
            }
        },
        "group.TeacherGroups": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/group.Group"
                    }
                }
            }
        },
        "group.TeacherId": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "group.UpdateGroupReq": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "room": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                }
            }
        },
        "group.UpdateGroupResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "user.GetAllUsersResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.GetProfileResponse"
                    }
                }
            }
        },
        "user.GetProfileResponse": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "hh_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user.LoginRequest": {
            "type": "object",
            "properties": {
                "hh_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.LoginResponse": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user.RegisterRequest": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "hh_id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user.Tokens": {
            "type": "object",
            "properties": {
                "refreshtoken": {
                    "type": "string"
                }
            }
        },
        "user.UpdateProfileAdminRequest": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "user.UpdateProfileRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API Gateway",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
