// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/all/user/login": {
            "post": {
                "description": "This endpoint logs in a user by checking the credentials and generating JWT tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "all"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User Login Data",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens",
                        "schema": {
                            "$ref": "#/definitions/user.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/all/user/refresh": {
            "post": {
                "description": "it generates new access token",
                "tags": [
                    "all"
                ],
                "summary": "Refresh token",
                "parameters": [
                    {
                        "description": "enough",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.Tokens"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "tokens",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid date",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error while reading from server",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/check/submit": {
            "post": {
                "description": "This API checks the submitted code using the checker service and returns the result via SSE.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "summary": "Check code with the checker service",
                "parameters": [
                    {
                        "description": "Request body containing code, language, limits, and I/O",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.RunRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event stream with results",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/add-student": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint allows adding a student to a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Add student to group",
                "parameters": [
                    {
                        "description": "Student addition request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.AddStudentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful student addition",
                        "schema": {
                            "$ref": "#/definitions/group.AddStudentResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/add-teacher": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint allows adding a teacher to a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Add teacher to group",
                "parameters": [
                    {
                        "description": "Teacher addition request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.AddTeacherReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful teacher addition",
                        "schema": {
                            "$ref": "#/definitions/group.AddTeacherResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint is used to create a new group in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Create a new group",
                "parameters": [
                    {
                        "description": "Group creation request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.CreateGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group creation",
                        "schema": {
                            "$ref": "#/definitions/group.CreateGroupResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/delete": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint is used to delete a group from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Delete a group",
                "parameters": [
                    {
                        "description": "Group deletion request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.GroupId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group deletion",
                        "schema": {
                            "$ref": "#/definitions/group.DeleteResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/delete-student": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint allows deleting a student from a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Delete student from group",
                "parameters": [
                    {
                        "description": "Student deletion request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.DeleteStudentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful student deletion",
                        "schema": {
                            "$ref": "#/definitions/group.DeleteResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/delete-teacher": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint allows deleting a teacher from a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Delete teacher from group",
                "parameters": [
                    {
                        "description": "Teacher deletion request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.DeleteTeacherReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful teacher deletion",
                        "schema": {
                            "$ref": "#/definitions/group.DeleteResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/getAll": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves all groups with optional filters like room and subject.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get all groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Room filter",
                        "name": "room",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Subject ID filter",
                        "name": "subject_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "page for pagination",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group retrieval",
                        "schema": {
                            "$ref": "#/definitions/group.GetAllGroupsResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/getById/{group_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves the details of a group by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get group by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID request (group_id)",
                        "name": "data",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group retrieval",
                        "schema": {
                            "$ref": "#/definitions/group.Group"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/student-groups/{hh_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves the list of groups a specific student belongs to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get student groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID (hh_id)",
                        "name": "hh_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of student groups",
                        "schema": {
                            "$ref": "#/definitions/group.StudentGroups"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/students/{group_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves the list of students in a specific group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get students of a group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID (group_id)",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of group students",
                        "schema": {
                            "$ref": "#/definitions/group.GroupStudents"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/teacher-groups/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves the list of groups a specific teacher belongs to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Get teacher groups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teacher ID (id)",
                        "name": "data",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of teacher groups",
                        "schema": {
                            "$ref": "#/definitions/group.TeacherGroups"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/groups/update": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint is used to update the details of an existing group.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing group",
                "parameters": [
                    {
                        "description": "Group update request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/group.UpdateGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful group update",
                        "schema": {
                            "$ref": "#/definitions/group.UpdateGroupResp"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/question-inputs/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "DeleteQuestionInput",
                "tags": [
                    "questionInputAndOutput"
                ],
                "summary": "DeleteQuestionInput",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question input deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/question-inputs/question/{question_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "GetQuestionInputsByQuestionId",
                "tags": [
                    "questionInputAndOutput"
                ],
                "summary": "GetQuestionInputsByQuestionId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "question_id",
                        "name": "question_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetAllQuestionInputsWithOutputsByQuestionIdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/question-inputs/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "GetQuestionInputById",
                "tags": [
                    "questionInputAndOutput"
                ],
                "summary": "GetQuestionInputById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetQuestionInputWithOutputsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/questions/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "CreateQuestion",
                "tags": [
                    "question"
                ],
                "summary": "CreateQuestion",
                "parameters": [
                    {
                        "description": "question info",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateQuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id",
                        "schema": {
                            "$ref": "#/definitions/question.QuestionId"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/questions/delete-image/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "DeleteImageFromQuestion",
                "tags": [
                    "question"
                ],
                "summary": "DeleteImageFromQuestion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/questions/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "DeleteQuestion",
                "tags": [
                    "question"
                ],
                "summary": "DeleteQuestion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/questions/getAll": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "CreateQuestion",
                "tags": [
                    "question"
                ],
                "summary": "CreateQuestion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "topic_id",
                        "name": "topic_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "number",
                        "name": "number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "difficulty",
                        "name": "difficulty",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "input_info",
                        "name": "input_info",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "output_info",
                        "name": "output_info",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id",
                        "schema": {
                            "$ref": "#/definitions/question.QuestionId"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/questions/update/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "UpdateQuestion",
                "tags": [
                    "question"
                ],
                "summary": "UpdateQuestion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "question info",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateQuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Question updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/questions/upload-image/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "UploadImageToQuestion",
                "tags": [
                    "question"
                ],
                "summary": "UploadImageToQuestion",
                "parameters": [
                    {
                        "type": "file",
                        "description": "file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image uploaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/questions/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "GetQuestionById",
                "tags": [
                    "question"
                ],
                "summary": "GetQuestionById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id",
                        "schema": {
                            "$ref": "#/definitions/question.GetQuestionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/subjects/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint is used to create a new Subject in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subjects"
                ],
                "summary": "Create a new Subject",
                "parameters": [
                    {
                        "description": "Subject creation request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subject.CreateSubjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Subject creation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/subjects/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint deletes a subject by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subjects"
                ],
                "summary": "Delete a Subject by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Subject deletion",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "404": {
                        "description": "Subject not found",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/subjects/get/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves a specific subject by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subjects"
                ],
                "summary": "Get a Subject by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of the subject",
                        "schema": {
                            "$ref": "#/definitions/subject.GetSubjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "404": {
                        "description": "Subject not found",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/subjects/getall": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves all subjects with pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subjects"
                ],
                "summary": "Get all Subjects",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit of subjects",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page for pagination",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of subjects",
                        "schema": {
                            "$ref": "#/definitions/subject.GetAllSubjectsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/subjects/update/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint updates an existing subject by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subjects"
                ],
                "summary": "Update a Subject",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subject update request",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subject.UpdateSubjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Subject update",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request: invalid input data",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "404": {
                        "description": "Subject not found",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/task/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Yangi task yaratish uchun ma'lumotlarni qabul qiladi",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Task yaratish",
                "parameters": [
                    {
                        "description": "Task yaratish uchun zarur ma'lumotlar",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.CreateTaskReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Yaratilgan task haqida ma'lumot",
                        "schema": {
                            "$ref": "#/definitions/task.CreateTaskResp"
                        }
                    },
                    "400": {
                        "description": "Noto'g'ri ma'lumot kiritilgan",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Serverda xato",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/task/delete": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Berilgan ID bo'yicha taskni o'chiradi",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Task o'chirish",
                "parameters": [
                    {
                        "description": "O'chirilishi kerak bo'lgan task ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/task.DeleteTaskReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "O'chirilgan task haqida ma'lumot",
                        "schema": {
                            "$ref": "#/definitions/task.DeleteTaskResp"
                        }
                    },
                    "400": {
                        "description": "Noto'g'ri ma'lumot kiritilgan",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Serverda xato",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/task/get": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Berilgan IDlar bo'yicha task ma'lumotlarini olish",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Taskni olish",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Foydalanuvchi ID",
                        "name": "hh_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Mavzu ID",
                        "name": "topic_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Olingan task haqida ma'lumot",
                        "schema": {
                            "$ref": "#/definitions/task.GetTaskResp"
                        }
                    },
                    "500": {
                        "description": "Serverda xato",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/test-cases/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new test case",
                "tags": [
                    "testCase"
                ],
                "summary": "CreateTestCase",
                "parameters": [
                    {
                        "description": "Create test case request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/question.CreateTestCaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test case created successfully",
                        "schema": {
                            "$ref": "#/definitions/question.TestCaseId"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/test-cases/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete test case",
                "tags": [
                    "testCase"
                ],
                "summary": "DeleteTestCase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Test case id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test case deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/test-cases/question/{question_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get test cases by question id",
                "tags": [
                    "testCase"
                ],
                "summary": "GetTestCasesByQuestionId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Question id",
                        "name": "question_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test cases retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/question.GetAllTestCasesByQuestionIdResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/test-cases/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get test case by id",
                "tags": [
                    "testCase"
                ],
                "summary": "GetTestCaseById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Test case id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test case retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/question.GetTestCaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/topics/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Ushbu API orqali yangi topic yaratishingiz mumkin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Topic"
                ],
                "summary": "Create a new topic",
                "parameters": [
                    {
                        "description": "Create Topic request body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/topic.CreateTopicReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Muvaffaqiyatli yaratildi",
                        "schema": {
                            "$ref": "#/definitions/topic.CreateTopicResp"
                        }
                    },
                    "400": {
                        "description": "Noto'g'ri ma'lumot kiritdingiz",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Serverda xatolik yuz berdi",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/topics/delete/{topic_id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Ushbu API orqali mavjud topicni o'chirishingiz mumkin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Topic"
                ],
                "summary": "Delete an existing topic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic ID",
                        "name": "topic_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mavzu muvaffaqiyatli o'chirildi",
                        "schema": {
                            "$ref": "#/definitions/topic.DeleteTopicResp"
                        }
                    },
                    "400": {
                        "description": "Noto'g'ri ma'lumot kiritdingiz",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Serverda xatolik yuz berdi",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/topics/getAll": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Bu API barcha mavzularni qaytaradi.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Topic"
                ],
                "summary": "Get all topics",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1000,
                        "description": "Limit of topics (optional)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page for topics (optional)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter for subjects (subject_id)",
                        "name": "subject_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mavzular ro'yxati",
                        "schema": {
                            "$ref": "#/definitions/topic.GetAllTopicsResp"
                        }
                    },
                    "400": {
                        "description": "Noto'g'ri ma'lumot kiritildi",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Ichki xatolik",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/topics/update": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Ushbu API orqali mavjud topicni yangilashingiz mumkin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Topic"
                ],
                "summary": "Update an existing topic",
                "parameters": [
                    {
                        "description": "Update Topic request body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/topic.UpdateTopicReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Muvaffaqiyatli yangilandi",
                        "schema": {
                            "$ref": "#/definitions/topic.UpdateTopicResp"
                        }
                    },
                    "400": {
                        "description": "Noto'g'ri ma'lumot kiritdingiz",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    },
                    "500": {
                        "description": "Serverda xatolik yuz berdi",
                        "schema": {
                            "$ref": "#/definitions/model.Error"
                        }
                    }
                }
            }
        },
        "/api/user/all": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all users with optional filters such as role, group, subject, teacher, and pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role to filter by",
                        "name": "Role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group to filter by",
                        "name": "Group",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Subject to filter by",
                        "name": "Subject",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Teacher ID to filter by",
                        "name": "Teacher",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Unique household ID to filter by",
                        "name": "HhId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Phone number to filter by",
                        "name": "PhoneNumber",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Gender to filter by",
                        "name": "Gender",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of users to return per page",
                        "name": "Limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "Offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved users",
                        "schema": {
                            "$ref": "#/definitions/user.GetAllUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks a user profile as deleted by setting the deleted_at timestamp.",
                "tags": [
                    "user"
                ],
                "summary": "Delete User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/getprofile": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This endpoint retrieves user profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.GetProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/photo": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upload User Photo",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "user"
                ],
                "summary": "UploadPhotoToUser",
                "parameters": [
                    {
                        "type": "file",
                        "description": "UploadMediaForm",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete Product Photo",
                "tags": [
                    "user"
                ],
                "summary": "DeleteUserPhoto",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new user",
                "tags": [
                    "user"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User info",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/update": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update User Profile by Admin",
                "tags": [
                    "user"
                ],
                "summary": "Update User by Admin",
                "parameters": [
                    {
                        "description": "info",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateProfileAdminRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/user/updateprofile": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update User profile",
                "tags": [
                    "user"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "description": "info",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "group.AddStudentReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "student_hh_id": {
                    "type": "string"
                }
            }
        },
        "group.AddStudentResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "group.AddTeacherReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "teacher_id": {
                    "type": "string"
                }
            }
        },
        "group.AddTeacherResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "group.CreateGroupReq": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "room": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "group.CreateGroupResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "group.DeleteResp": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "group.DeleteStudentReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "student_hh_id": {
                    "type": "string"
                }
            }
        },
        "group.DeleteTeacherReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "teacher_id": {
                    "type": "string"
                }
            }
        },
        "group.GetAllGroupsResp": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/group.Group"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                }
            }
        },
        "group.Group": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "room": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "subject_id": {
                    "type": "string"
                },
                "teacher_id": {
                    "type": "string"
                }
            }
        },
        "group.GroupId": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "group.GroupStudents": {
            "type": "object",
            "properties": {
                "students": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/group.Student"
                    }
                }
            }
        },
        "group.Student": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "hh_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "group.StudentGroups": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/group.Group"
                    }
                }
            }
        },
        "group.TeacherGroups": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/group.Group"
                    }
                }
            }
        },
        "group.UpdateGroupReq": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "room": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                }
            }
        },
        "group.UpdateGroupResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "handler.InputOutput": {
            "type": "object",
            "properties": {
                "in": {
                    "type": "string"
                },
                "out": {
                    "type": "string"
                }
            }
        },
        "handler.RunRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Kod",
                    "type": "string"
                },
                "io": {
                    "description": "I/O ma'lumotlari",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.InputOutput"
                    }
                },
                "lang": {
                    "description": "Dasturlash tili",
                    "type": "string"
                },
                "memoryLimit": {
                    "description": "Xotira cheklovi",
                    "type": "integer"
                },
                "timeLimit": {
                    "description": "Vaqt cheklovi",
                    "type": "integer"
                }
            }
        },
        "model.CreateQuestionRequest": {
            "type": "object",
            "properties": {
                "constrains": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "input_info": {
                    "type": "string"
                },
                "inputs_outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.InputOutput"
                    }
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "output_info": {
                    "type": "string"
                },
                "topic_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "model.GetAllQuestionInputsWithOutputsByQuestionIdResponse": {
            "type": "object",
            "properties": {
                "inputs_with_outputs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.GetQuestionInputWithOutput"
                    }
                }
            }
        },
        "model.GetQuestionInputWithOutput": {
            "type": "object",
            "properties": {
                "input": {
                    "$ref": "#/definitions/question.GetQuestionInputResponse"
                },
                "output": {
                    "description": "Output maydoni",
                    "allOf": [
                        {
                            "$ref": "#/definitions/question.GetQuestionOutputResponse"
                        }
                    ]
                }
            }
        },
        "model.GetQuestionInputWithOutputsResponse": {
            "type": "object",
            "properties": {
                "input": {
                    "$ref": "#/definitions/question.GetQuestionInputResponse"
                },
                "output": {
                    "$ref": "#/definitions/question.GetQuestionOutputResponse"
                }
            }
        },
        "model.InputOutput": {
            "type": "object",
            "properties": {
                "input": {
                    "type": "string"
                },
                "output": {
                    "type": "string"
                }
            }
        },
        "model.UpdateQuestionRequest": {
            "type": "object",
            "properties": {
                "constrains": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "input_info": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "memory_limit": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "output_info": {
                    "type": "string"
                },
                "time_limit": {
                    "type": "integer"
                },
                "topic_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "question.CreateTestCaseRequest": {
            "type": "object",
            "properties": {
                "case": {
                    "type": "string"
                },
                "is_correct": {
                    "type": "boolean"
                },
                "question_id": {
                    "type": "string"
                }
            }
        },
        "question.GetAllTestCasesByQuestionIdResponse": {
            "type": "object",
            "properties": {
                "test_cases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/question.GetTestCaseResponse"
                    }
                }
            }
        },
        "question.GetQuestionInputResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "input": {
                    "type": "string"
                },
                "question_id": {
                    "type": "string"
                }
            }
        },
        "question.GetQuestionOutputResponse": {
            "type": "object",
            "properties": {
                "answer": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "input_id": {
                    "type": "string"
                },
                "question_id": {
                    "type": "string"
                }
            }
        },
        "question.GetQuestionResponse": {
            "type": "object",
            "properties": {
                "constrains": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "input_info": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "memory_limit": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "output_info": {
                    "type": "string"
                },
                "time_limit": {
                    "type": "integer"
                },
                "topic_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "question.GetTestCaseResponse": {
            "type": "object",
            "properties": {
                "case": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_correct": {
                    "type": "boolean"
                },
                "question_id": {
                    "type": "string"
                }
            }
        },
        "question.QuestionId": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "question.TestCaseId": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "subject.CreateSubjectRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "subject.GetAll": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "subject.GetAllSubjectsResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "subjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/subject.GetAll"
                    }
                }
            }
        },
        "subject.GetSubjectResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subject.UpdateSubjectRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "task.CreateTaskReq": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "topic_id": {
                    "type": "string"
                }
            }
        },
        "task.CreateTaskResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "task.DeleteTaskReq": {
            "type": "object",
            "properties": {
                "task_id": {
                    "type": "string"
                }
            }
        },
        "task.DeleteTaskResp": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "task.GetTaskResp": {
            "type": "object",
            "properties": {
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/task.Question"
                    }
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "task.Question": {
            "type": "object",
            "properties": {
                "constrains": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "input_info": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "memory_limit": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "integer"
                },
                "output_info": {
                    "type": "string"
                },
                "time_limit": {
                    "type": "integer"
                },
                "topic_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "topic.CreateTopicReq": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "question_count": {
                    "type": "integer"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "topic.CreateTopicResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "topic.DeleteTopicResp": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "topic.GetAllTopicsResp": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/topic.Topic"
                    }
                }
            }
        },
        "topic.Topic": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "question_count": {
                    "type": "integer"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "topic.UpdateTopicReq": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "question_count": {
                    "type": "integer"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "topic.UpdateTopicResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "user.GetAllUsersResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.GetProfileResponse"
                    }
                }
            }
        },
        "user.GetProfileResponse": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "hh_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user.LoginRequest": {
            "type": "object",
            "properties": {
                "hh_id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.LoginResponse": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user.RegisterRequest": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "hh_id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user.Tokens": {
            "type": "object",
            "properties": {
                "refreshtoken": {
                    "type": "string"
                }
            }
        },
        "user.UpdateProfileAdminRequest": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "user.UpdateProfileRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "API Gateway",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
