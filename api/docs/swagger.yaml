definitions:
  group.AddStudentReq:
    properties:
      group_id:
        type: string
      student_hh_id:
        type: string
    type: object
  group.AddStudentResp:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  group.AddTeacherReq:
    properties:
      group_id:
        type: string
      teacher_id:
        type: string
    type: object
  group.AddTeacherResp:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  group.CreateGroupReq:
    properties:
      end_time:
        type: string
      name:
        type: string
      room:
        type: string
      start_time:
        type: string
      started_at:
        type: string
      subject_id:
        type: string
    type: object
  group.CreateGroupResp:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  group.DeleteResp:
    properties:
      status:
        type: string
    type: object
  group.DeleteStudentReq:
    properties:
      group_id:
        type: string
      student_hh_id:
        type: string
    type: object
  group.DeleteTeacherReq:
    properties:
      group_id:
        type: string
      id:
        type: string
      teacher_id:
        type: string
    type: object
  group.GetAllGroupsResp:
    properties:
      groups:
        items:
          $ref: '#/definitions/group.Group'
        type: array
      limit:
        type: integer
      offset:
        type: integer
    type: object
  group.Group:
    properties:
      end_time:
        type: string
      id:
        type: string
      name:
        type: string
      room:
        type: string
      start_time:
        type: string
      started_at:
        type: string
      subject_id:
        type: string
      teacher_id:
        type: string
    type: object
  group.GroupId:
    properties:
      id:
        type: string
    type: object
  group.GroupStudents:
    properties:
      students:
        items:
          $ref: '#/definitions/group.Student'
        type: array
    type: object
  group.Student:
    properties:
      date_of_birth:
        type: string
      firstname:
        type: string
      gender:
        type: string
      hh_id:
        type: string
      id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  group.StudentGroups:
    properties:
      groups:
        items:
          $ref: '#/definitions/group.Group'
        type: array
    type: object
  group.TeacherGroups:
    properties:
      groups:
        items:
          $ref: '#/definitions/group.Group'
        type: array
    type: object
  group.UpdateGroupReq:
    properties:
      end_time:
        type: string
      id:
        type: string
      name:
        type: string
      room:
        type: string
      start_time:
        type: string
      started_at:
        type: string
    type: object
  group.UpdateGroupResp:
    properties:
      id:
        type: string
      updated_at:
        type: string
    type: object
  model.Error:
    properties:
      message:
        type: string
    type: object
  model.UpdateQuestionRequest:
    properties:
      difficulty:
        type: string
      input_info:
        type: string
      language:
        type: string
      memory_limit:
        type: integer
      name:
        type: string
      number:
        type: integer
      output_info:
        type: string
      time_limit:
        type: integer
      topic_id:
        type: string
      type:
        type: string
    type: object
  question.CreateQuestionInputRequest:
    properties:
      input:
        type: string
      question_id:
        type: string
    type: object
  question.CreateQuestionOutputRequest:
    properties:
      answer:
        type: string
      input_id:
        type: string
      question_id:
        type: string
    type: object
  question.CreateQuestionRequest:
    properties:
      constrains:
        type: string
      description:
        type: string
      difficulty:
        type: string
      image:
        type: string
      input_info:
        type: string
      language:
        type: string
      memory_limit:
        type: integer
      name:
        type: string
      number:
        type: integer
      output_info:
        type: string
      time_limit:
        type: integer
      topic_id:
        type: string
      type:
        type: string
    type: object
  question.CreateTestCaseRequest:
    properties:
      case:
        type: string
      is_correct:
        type: boolean
      question_id:
        type: string
    type: object
  question.GetAllQuestionInputsByQuestionIdResponse:
    properties:
      question_inputs:
        items:
          $ref: '#/definitions/question.GetQuestionInputResponse'
        type: array
    type: object
  question.GetAllQuestionOutputsByQuestionIdResponse:
    properties:
      question_outputs:
        items:
          $ref: '#/definitions/question.GetQuestionOutputResponse'
        type: array
    type: object
  question.GetAllTestCasesByQuestionIdResponse:
    properties:
      test_cases:
        items:
          $ref: '#/definitions/question.GetTestCaseResponse'
        type: array
    type: object
  question.GetQuestionInputResponse:
    properties:
      id:
        type: string
      input:
        type: string
      question_id:
        type: string
    type: object
  question.GetQuestionOutputResponse:
    properties:
      answer:
        type: string
      id:
        type: string
      input_id:
        type: string
      question_id:
        type: string
    type: object
  question.GetQuestionResponse:
    properties:
      constrains:
        type: string
      created_at:
        type: string
      description:
        type: string
      difficulty:
        type: string
      id:
        type: string
      image:
        type: string
      input_info:
        type: string
      language:
        type: string
      memory_limit:
        type: integer
      name:
        type: string
      number:
        type: integer
      output_info:
        type: string
      time_limit:
        type: integer
      topic_id:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  question.GetTestCaseResponse:
    properties:
      case:
        type: string
      id:
        type: string
      is_correct:
        type: boolean
      question_id:
        type: string
    type: object
  question.QuestionId:
    properties:
      id:
        type: string
    type: object
  question.QuestionInputId:
    properties:
      id:
        type: string
    type: object
  question.QuestionOutputId:
    properties:
      id:
        type: string
    type: object
  question.TestCaseId:
    properties:
      id:
        type: string
    type: object
  question.Void:
    type: object
  subject.CreateSubjectRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  subject.GetAll:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  subject.GetAllSubjectsResponse:
    properties:
      subjects:
        items:
          $ref: '#/definitions/subject.GetAll'
        type: array
    type: object
  subject.GetSubjectResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  subject.UpdateSubjectRequest:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  topic.CreateTopicReq:
    properties:
      description:
        type: string
      name:
        type: string
      subject_id:
        type: string
    type: object
  topic.CreateTopicResp:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  topic.DeleteTopicReq:
    properties:
      topic_id:
        type: string
    type: object
  topic.DeleteTopicResp:
    properties:
      status:
        type: string
    type: object
  topic.GetAllTopicsResp:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      topics:
        items:
          $ref: '#/definitions/topic.Topic'
        type: array
    type: object
  topic.Topic:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      subject_id:
        type: string
    type: object
  topic.UpdateTopicReq:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      subject_id:
        type: string
    type: object
  topic.UpdateTopicResp:
    properties:
      id:
        type: string
      updated_at:
        type: string
    type: object
  user.GetAllUsersResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total_count:
        type: integer
      users:
        items:
          $ref: '#/definitions/user.GetProfileResponse'
        type: array
    type: object
  user.GetProfileResponse:
    properties:
      date_of_birth:
        type: string
      firstname:
        type: string
      gender:
        type: string
      hh_id:
        type: string
      id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      photo:
        type: string
      role:
        type: string
    type: object
  user.LoginRequest:
    properties:
      hh_id:
        type: string
      password:
        type: string
    type: object
  user.LoginResponse:
    properties:
      access:
        type: string
      id:
        type: string
      refresh:
        type: string
      role:
        type: string
    type: object
  user.RegisterRequest:
    properties:
      date_of_birth:
        type: string
      firstname:
        type: string
      gender:
        type: string
      hh_id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  user.Tokens:
    properties:
      refreshtoken:
        type: string
    type: object
  user.UpdateProfileAdminRequest:
    properties:
      date_of_birth:
        type: string
      firstname:
        type: string
      gender:
        type: string
      id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  user.UpdateProfileRequest:
    properties:
      id:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /all/user/login:
    post:
      consumes:
      - application/json
      description: This endpoint logs in a user by checking the credentials and generating
        JWT tokens.
      parameters:
      - description: User Login Data
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Login a user
      tags:
      - all
  /all/user/refresh:
    post:
      description: it generates new access token
      parameters:
      - description: enough
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/user.Tokens'
      responses:
        "200":
          description: tokens
          schema:
            type: string
        "400":
          description: Invalid date
          schema:
            type: string
        "500":
          description: error while reading from server
          schema:
            type: string
      summary: Refresh token
      tags:
      - all
  /api/groups/add-student:
    post:
      consumes:
      - application/json
      description: This endpoint allows adding a student to a specific group.
      parameters:
      - description: Student addition request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.AddStudentReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful student addition
          schema:
            $ref: '#/definitions/group.AddStudentResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Add student to group
      tags:
      - groups
  /api/groups/add-teacher:
    post:
      consumes:
      - application/json
      description: This endpoint allows adding a teacher to a specific group.
      parameters:
      - description: Teacher addition request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.AddTeacherReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful teacher addition
          schema:
            $ref: '#/definitions/group.AddTeacherResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Add teacher to group
      tags:
      - groups
  /api/groups/create:
    post:
      consumes:
      - application/json
      description: This endpoint is used to create a new group in the system.
      parameters:
      - description: Group creation request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.CreateGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful group creation
          schema:
            $ref: '#/definitions/group.CreateGroupResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new group
      tags:
      - groups
  /api/groups/delete:
    delete:
      consumes:
      - application/json
      description: This endpoint is used to delete a group from the system.
      parameters:
      - description: Group deletion request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.GroupId'
      produces:
      - application/json
      responses:
        "200":
          description: Successful group deletion
          schema:
            $ref: '#/definitions/group.DeleteResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a group
      tags:
      - groups
  /api/groups/delete-student:
    delete:
      consumes:
      - application/json
      description: This endpoint allows deleting a student from a specific group.
      parameters:
      - description: Student deletion request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.DeleteStudentReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful student deletion
          schema:
            $ref: '#/definitions/group.DeleteResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete student from group
      tags:
      - groups
  /api/groups/delete-teacher:
    delete:
      consumes:
      - application/json
      description: This endpoint allows deleting a teacher from a specific group.
      parameters:
      - description: Teacher deletion request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.DeleteTeacherReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful teacher deletion
          schema:
            $ref: '#/definitions/group.DeleteResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete teacher from group
      tags:
      - groups
  /api/groups/getAll:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves all groups with optional filters like room
        and subject.
      parameters:
      - description: Room filter
        in: query
        name: room
        type: string
      - description: Subject ID filter
        in: query
        name: subject_id
        type: string
      - description: Limit for pagination
        in: query
        name: limit
        type: string
      - description: Offset for pagination
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful group retrieval
          schema:
            $ref: '#/definitions/group.GetAllGroupsResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all groups
      tags:
      - groups
  /api/groups/getById/{group_id}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the details of a group by its ID.
      parameters:
      - description: Group ID request (group_id)
        in: path
        name: data
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful group retrieval
          schema:
            $ref: '#/definitions/group.Group'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Get group by ID
      tags:
      - groups
  /api/groups/student-groups/{hh_id}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the list of groups a specific student belongs
        to.
      parameters:
      - description: Student ID (hh_id)
        in: path
        name: hh_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of student groups
          schema:
            $ref: '#/definitions/group.StudentGroups'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Get student groups
      tags:
      - groups
  /api/groups/students/{group_id}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the list of students in a specific group.
      parameters:
      - description: Group ID (group_id)
        in: path
        name: data
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of group students
          schema:
            $ref: '#/definitions/group.GroupStudents'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Get students of a group
      tags:
      - groups
  /api/groups/teacher-groups/{id}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the list of groups a specific teacher belongs
        to.
      parameters:
      - description: Teacher ID (id)
        in: path
        name: data
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of teacher groups
          schema:
            $ref: '#/definitions/group.TeacherGroups'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Get teacher groups
      tags:
      - groups
  /api/groups/update:
    put:
      consumes:
      - application/json
      description: This endpoint is used to update the details of an existing group.
      parameters:
      - description: Group update request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.UpdateGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful group update
          schema:
            $ref: '#/definitions/group.UpdateGroupResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Update an existing group
      tags:
      - groups
  /api/question-inputs/{id}:
    get:
      description: GetQuestionInputById
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/question.GetQuestionInputResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: GetQuestionInputById
      tags:
      - questionInput
  /api/question-inputs/create:
    post:
      description: CreateQuestionInput
      parameters:
      - description: questionInput
        in: body
        name: questionInput
        required: true
        schema:
          $ref: '#/definitions/question.CreateQuestionInputRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/question.QuestionInputId'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: CreateQuestionInput
      tags:
      - questionInput
  /api/question-inputs/delete/{id}:
    delete:
      description: DeleteQuestionInput
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Question input deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: DeleteQuestionInput
      tags:
      - questionInput
  /api/question-inputs/question/{question_id}:
    get:
      description: GetQuestionInputsByQuestionId
      parameters:
      - description: question_id
        in: path
        name: question_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/question.GetAllQuestionInputsByQuestionIdResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: GetQuestionInputsByQuestionId
      tags:
      - questionInput
  /api/question-outputs/{id}:
    get:
      description: GetQuestionOutputById
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: questionOutput info
          schema:
            $ref: '#/definitions/question.GetQuestionOutputResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: GetQuestionOutputById
      tags:
      - questionOutput
  /api/question-outputs/create:
    post:
      description: CreateQuestionOutput
      parameters:
      - description: questionOutput info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/question.CreateQuestionOutputRequest'
      responses:
        "200":
          description: id
          schema:
            $ref: '#/definitions/question.QuestionOutputId'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: CreateQuestionOutput
      tags:
      - questionOutput
  /api/question-outputs/delete/{id}:
    delete:
      description: DeleteQuestionOutput
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Void
          schema:
            $ref: '#/definitions/question.Void'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: DeleteQuestionOutput
      tags:
      - questionOutput
  /api/question-outputs/question/{question_id}:
    get:
      description: GetQuestionOutputsByQuestionId
      parameters:
      - description: question_id
        in: path
        name: question_id
        required: true
        type: string
      responses:
        "200":
          description: questionOutput info
          schema:
            $ref: '#/definitions/question.GetAllQuestionOutputsByQuestionIdResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: GetQuestionOutputsByQuestionId
      tags:
      - questionOutput
  /api/questions/{id}:
    get:
      description: GetQuestionById
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: id
          schema:
            $ref: '#/definitions/question.GetQuestionResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: GetQuestionById
      tags:
      - question
  /api/questions/create:
    post:
      description: CreateQuestion
      parameters:
      - description: question info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/question.CreateQuestionRequest'
      responses:
        "200":
          description: id
          schema:
            $ref: '#/definitions/question.QuestionId'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: CreateQuestion
      tags:
      - question
  /api/questions/delete-image/{id}:
    delete:
      description: DeleteImageFromQuestion
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Image deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: DeleteImageFromQuestion
      tags:
      - question
  /api/questions/delete/{id}:
    delete:
      description: DeleteQuestion
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Question deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: DeleteQuestion
      tags:
      - question
  /api/questions/getAll:
    get:
      description: CreateQuestion
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: offset
        in: query
        name: offset
        type: string
      - description: topic_name
        in: query
        name: topic_name
        type: string
      - description: type
        in: query
        name: type
        type: string
      - description: name
        in: query
        name: name
        type: string
      - description: number
        in: query
        name: number
        type: string
      - description: difficulty
        in: query
        name: difficulty
        type: string
      - description: input_info
        in: query
        name: input_info
        type: string
      - description: output_info
        in: query
        name: output_info
        type: string
      responses:
        "200":
          description: id
          schema:
            $ref: '#/definitions/question.QuestionId'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: CreateQuestion
      tags:
      - question
  /api/questions/update/{id}:
    put:
      description: UpdateQuestion
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: question info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/model.UpdateQuestionRequest'
      responses:
        "200":
          description: Question updated successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: UpdateQuestion
      tags:
      - question
  /api/questions/upload-image/{id}:
    post:
      description: UploadImageToQuestion
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: UploadImageToQuestion
      tags:
      - question
  /api/subjects/create:
    post:
      consumes:
      - application/json
      description: This endpoint is used to create a new Subject in the system.
      parameters:
      - description: Subject creation request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/subject.CreateSubjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful Subject creation
          schema:
            type: string
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new Subject
      tags:
      - subjects
  /api/subjects/delete/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint deletes a subject by its ID.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful Subject deletion
          schema:
            type: string
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Subject not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a Subject by ID
      tags:
      - subjects
  /api/subjects/get/{id}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves a specific subject by its ID.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of the subject
          schema:
            $ref: '#/definitions/subject.GetSubjectResponse'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Subject not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a Subject by ID
      tags:
      - subjects
  /api/subjects/getall:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves all subjects with pagination.
      parameters:
      - description: Limit of subjects
        in: query
        name: limit
        required: true
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of subjects
          schema:
            $ref: '#/definitions/subject.GetAllSubjectsResponse'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all Subjects
      tags:
      - subjects
  /api/subjects/update/{id}:
    put:
      consumes:
      - application/json
      description: This endpoint updates an existing subject by its ID.
      parameters:
      - description: Subject ID
        in: path
        name: id
        required: true
        type: string
      - description: Subject update request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/subject.UpdateSubjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful Subject update
          schema:
            type: string
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Subject not found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Update a Subject
      tags:
      - subjects
  /api/test-cases/{id}:
    get:
      description: Get test case by id
      parameters:
      - description: Test case id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Test case retrieved successfully
          schema:
            $ref: '#/definitions/question.GetTestCaseResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: GetTestCaseById
      tags:
      - testCase
  /api/test-cases/create:
    post:
      description: Create a new test case
      parameters:
      - description: Create test case request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/question.CreateTestCaseRequest'
      responses:
        "200":
          description: Test case created successfully
          schema:
            $ref: '#/definitions/question.TestCaseId'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: CreateTestCase
      tags:
      - testCase
  /api/test-cases/delete/{id}:
    delete:
      description: Delete test case
      parameters:
      - description: Test case id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Test case deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: DeleteTestCase
      tags:
      - testCase
  /api/test-cases/question/{question_id}:
    get:
      description: Get test cases by question id
      parameters:
      - description: Question id
        in: path
        name: question_id
        required: true
        type: string
      responses:
        "200":
          description: Test cases retrieved successfully
          schema:
            $ref: '#/definitions/question.GetAllTestCasesByQuestionIdResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: GetTestCasesByQuestionId
      tags:
      - testCase
  /api/user/all:
    get:
      consumes:
      - application/json
      description: Retrieve all users with optional filters such as role, group, subject,
        teacher, and pagination.
      parameters:
      - description: Role to filter by
        in: query
        name: Role
        type: string
      - description: Group to filter by
        in: query
        name: Group
        type: string
      - description: Subject to filter by
        in: query
        name: Subject
        type: string
      - description: Teacher ID to filter by
        in: query
        name: Teacher
        type: string
      - description: Unique household ID to filter by
        in: query
        name: HhId
        type: string
      - description: Phone number to filter by
        in: query
        name: PhoneNumber
        type: string
      - description: Gender to filter by
        in: query
        name: Gender
        type: string
      - default: 10
        description: Number of users to return per page
        in: query
        name: Limit
        type: integer
      - description: Pagination offset
        in: query
        name: Offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved users
          schema:
            $ref: '#/definitions/user.GetAllUsersResponse'
        "400":
          description: Invalid request parameters
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - user
  /api/user/delete/{id}:
    delete:
      description: Marks a user profile as deleted by setting the deleted_at timestamp.
      parameters:
      - description: User ID to delete
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete User Profile
      tags:
      - user
  /api/user/getprofile:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves user profile.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.GetProfileResponse'
        "400":
          description: Invalid token
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - user
  /api/user/photo:
    delete:
      description: Delete Product Photo
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: DeleteUserPhoto
      tags:
      - user
    post:
      consumes:
      - multipart/form-data
      description: Upload User Photo
      parameters:
      - description: UploadMediaForm
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: UploadPhotoToUser
      tags:
      - user
  /api/user/register:
    post:
      description: Create a new user
      parameters:
      - description: User info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/user.RegisterRequest'
      responses:
        "200":
          description: Registered successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - user
  /api/user/update:
    put:
      description: Update User Profile by Admin
      parameters:
      - description: info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/user.UpdateProfileAdminRequest'
      responses:
        "200":
          description: User profile updated
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update User by Admin
      tags:
      - user
  /api/user/updateprofile:
    put:
      description: Update User profile
      parameters:
      - description: info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/user.UpdateProfileRequest'
      responses:
        "200":
          description: message
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update User
      tags:
      - user
  /topics/create:
    post:
      consumes:
      - application/json
      description: Ushbu API orqali yangi topic yaratishingiz mumkin.
      parameters:
      - description: Create Topic request body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/topic.CreateTopicReq'
      produces:
      - application/json
      responses:
        "200":
          description: Muvaffaqiyatli yaratildi
          schema:
            $ref: '#/definitions/topic.CreateTopicResp'
        "400":
          description: Noto'g'ri ma'lumot kiritdingiz
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Serverda xatolik yuz berdi
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new topic
      tags:
      - Topic
  /topics/delete:
    delete:
      consumes:
      - application/json
      description: Ushbu API orqali mavjud topicni o'chirishingiz mumkin.
      parameters:
      - description: Delete Topic request body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/topic.DeleteTopicReq'
      produces:
      - application/json
      responses:
        "200":
          description: Mavzu muvaffaqiyatli o'chirildi
          schema:
            $ref: '#/definitions/topic.DeleteTopicResp'
        "400":
          description: Noto'g'ri ma'lumot kiritdingiz
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Serverda xatolik yuz berdi
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete an existing topic
      tags:
      - Topic
  /topics/getAll:
    get:
      consumes:
      - application/json
      description: Bu API barcha mavzularni qaytaradi.
      parameters:
      - default: 1000
        description: Limit of topics (optional)
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for topics (optional)
        in: query
        name: offset
        type: integer
      - description: Filter for subjects (subject_id)
        in: query
        name: data
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Mavzular ro'yxati
          schema:
            $ref: '#/definitions/topic.GetAllTopicsResp'
        "400":
          description: Noto'g'ri ma'lumot kiritildi
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Ichki xatolik
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all topics
      tags:
      - Topic
  /topics/update:
    put:
      consumes:
      - application/json
      description: Ushbu API orqali mavjud topicni yangilashingiz mumkin.
      parameters:
      - description: Update Topic request body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/topic.UpdateTopicReq'
      produces:
      - application/json
      responses:
        "200":
          description: Muvaffaqiyatli yangilandi
          schema:
            $ref: '#/definitions/topic.UpdateTopicResp'
        "400":
          description: Noto'g'ri ma'lumot kiritdingiz
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Serverda xatolik yuz berdi
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Update an existing topic
      tags:
      - Topic
securityDefinitions:
  ApiKeyAuth:
    description: API Gateway
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
