definitions:
  group.AddStudentReq:
    properties:
      group_id:
        type: string
      student_hh_id:
        type: string
    type: object
  group.AddStudentResp:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  group.AddTeacherReq:
    properties:
      group_id:
        type: string
      teacher_id:
        type: string
    type: object
  group.AddTeacherResp:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  group.CreateGroupReq:
    properties:
      end_time:
        type: string
      name:
        type: string
      room:
        type: string
      start_time:
        type: string
      started_at:
        type: string
      subject_id:
        type: string
    type: object
  group.CreateGroupResp:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  group.DeleteResp:
    properties:
      status:
        type: string
    type: object
  group.DeleteStudentReq:
    properties:
      group_id:
        type: string
      student_hh_id:
        type: string
    type: object
  group.DeleteTeacherReq:
    properties:
      group_id:
        type: string
      id:
        type: string
      teacher_id:
        type: string
    type: object
  group.GetAllGroupsResp:
    properties:
      groups:
        items:
          $ref: '#/definitions/group.Group'
        type: array
      limit:
        type: integer
      offset:
        type: integer
    type: object
  group.Group:
    properties:
      end_time:
        type: string
      id:
        type: string
      name:
        type: string
      room:
        type: string
      start_time:
        type: string
      started_at:
        type: string
      subject_id:
        type: string
      teacher_id:
        type: string
    type: object
  group.GroupId:
    properties:
      id:
        type: string
    type: object
  group.GroupStudents:
    properties:
      students:
        items:
          $ref: '#/definitions/group.Student'
        type: array
    type: object
  group.Student:
    properties:
      date_of_birth:
        type: string
      firstname:
        type: string
      gender:
        type: string
      hh_id:
        type: string
      id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  group.StudentGroups:
    properties:
      groups:
        items:
          $ref: '#/definitions/group.Group'
        type: array
    type: object
  group.StudentId:
    properties:
      hh_id:
        type: string
    type: object
  group.TeacherGroups:
    properties:
      groups:
        items:
          $ref: '#/definitions/group.Group'
        type: array
    type: object
  group.TeacherId:
    properties:
      id:
        type: string
    type: object
  group.UpdateGroupReq:
    properties:
      end_time:
        type: string
      id:
        type: string
      name:
        type: string
      room:
        type: string
      start_time:
        type: string
      started_at:
        type: string
    type: object
  group.UpdateGroupResp:
    properties:
      id:
        type: string
      updated_at:
        type: string
    type: object
  model.Error:
    properties:
      message:
        type: string
    type: object
  user.GetAllUsersResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total_count:
        type: integer
      users:
        items:
          $ref: '#/definitions/user.GetProfileResponse'
        type: array
    type: object
  user.GetProfileResponse:
    properties:
      date_of_birth:
        type: string
      firstname:
        type: string
      gender:
        type: string
      hh_id:
        type: string
      id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      photo:
        type: string
      role:
        type: string
    type: object
  user.LoginRequest:
    properties:
      hh_id:
        type: string
      password:
        type: string
    type: object
  user.LoginResponse:
    properties:
      access:
        type: string
      id:
        type: string
      refresh:
        type: string
      role:
        type: string
    type: object
  user.RegisterRequest:
    properties:
      date_of_birth:
        type: string
      firstname:
        type: string
      gender:
        type: string
      hh_id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  user.UpdateProfileAdminRequest:
    properties:
      date_of_birth:
        type: string
      firstname:
        type: string
      gender:
        type: string
      id:
        type: string
      lastname:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  user.UpdateProfileRequest:
    properties:
      id:
        type: string
      password:
        type: string
      profile_picture:
        type: string
    type: object
info:
  contact: {}
paths:
  /all/user/login:
    post:
      consumes:
      - application/json
      description: This endpoint logs in a user by checking the credentials and generating
        JWT tokens.
      parameters:
      - description: User Login Data
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "400":
          description: Invalid request body
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Login a user
      tags:
      - user
  /api/groups/add-student:
    post:
      consumes:
      - application/json
      description: This endpoint allows adding a student to a specific group.
      parameters:
      - description: Student addition request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.AddStudentReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful student addition
          schema:
            $ref: '#/definitions/group.AddStudentResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Add student to group
      tags:
      - groups
  /api/groups/add-teacher:
    post:
      consumes:
      - application/json
      description: This endpoint allows adding a teacher to a specific group.
      parameters:
      - description: Teacher addition request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.AddTeacherReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful teacher addition
          schema:
            $ref: '#/definitions/group.AddTeacherResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Add teacher to group
      tags:
      - groups
  /api/groups/create:
    post:
      consumes:
      - application/json
      description: This endpoint is used to create a new group in the system.
      parameters:
      - description: Group creation request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.CreateGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful group creation
          schema:
            $ref: '#/definitions/group.CreateGroupResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Create a new group
      tags:
      - groups
  /api/groups/delete:
    delete:
      consumes:
      - application/json
      description: This endpoint is used to delete a group from the system.
      parameters:
      - description: Group deletion request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.GroupId'
      produces:
      - application/json
      responses:
        "200":
          description: Successful group deletion
          schema:
            $ref: '#/definitions/group.DeleteResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Delete a group
      tags:
      - groups
  /api/groups/delete-student:
    delete:
      consumes:
      - application/json
      description: This endpoint allows deleting a student from a specific group.
      parameters:
      - description: Student deletion request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.DeleteStudentReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful student deletion
          schema:
            $ref: '#/definitions/group.DeleteResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Delete student from group
      tags:
      - groups
  /api/groups/delete-teacher:
    delete:
      consumes:
      - application/json
      description: This endpoint allows deleting a teacher from a specific group.
      parameters:
      - description: Teacher deletion request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.DeleteTeacherReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful teacher deletion
          schema:
            $ref: '#/definitions/group.DeleteResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Delete teacher from group
      tags:
      - groups
  /api/groups/getAll:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves all groups with optional filters like room
        and subject.
      parameters:
      - description: Room filter
        in: query
        name: room
        type: string
      - description: Subject ID filter
        in: query
        name: subject_id
        type: string
      - description: Limit for pagination
        in: query
        name: limit
        type: string
      - description: Offset for pagination
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful group retrieval
          schema:
            $ref: '#/definitions/group.GetAllGroupsResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get all groups
      tags:
      - groups
  /api/groups/getById:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the details of a group by its ID.
      parameters:
      - description: Group ID request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.GroupId'
      produces:
      - application/json
      responses:
        "200":
          description: Successful group retrieval
          schema:
            $ref: '#/definitions/group.Group'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get group by ID
      tags:
      - groups
  /api/groups/student-groups:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the list of groups a specific student belongs
        to.
      parameters:
      - description: Student ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.StudentId'
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of student groups
          schema:
            $ref: '#/definitions/group.StudentGroups'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get student groups
      tags:
      - groups
  /api/groups/students:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the list of students in a specific group.
      parameters:
      - description: Group ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.GroupId'
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of group students
          schema:
            $ref: '#/definitions/group.GroupStudents'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get students of a group
      tags:
      - groups
  /api/groups/teacher-groups:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the list of groups a specific teacher belongs
        to.
      parameters:
      - description: Teacher ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.TeacherId'
      produces:
      - application/json
      responses:
        "200":
          description: Successful retrieval of teacher groups
          schema:
            $ref: '#/definitions/group.TeacherGroups'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get teacher groups
      tags:
      - groups
  /api/groups/update:
    put:
      consumes:
      - application/json
      description: This endpoint is used to update the details of an existing group.
      parameters:
      - description: Group update request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/group.UpdateGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful group update
          schema:
            $ref: '#/definitions/group.UpdateGroupResp'
        "400":
          description: 'Bad request: invalid input data'
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Update an existing group
      tags:
      - groups
  /api/user/all:
    get:
      consumes:
      - application/json
      description: Retrieve all users with optional filters such as role, group, subject,
        teacher, and pagination.
      parameters:
      - description: Role to filter by
        in: query
        name: role
        type: string
      - description: Group to filter by
        in: query
        name: group
        type: string
      - description: Subject to filter by
        in: query
        name: subject
        type: string
      - description: Teacher ID to filter by
        in: query
        name: teacher
        type: string
      - description: Unique household ID to filter by
        in: query
        name: hh_id
        type: string
      - description: Phone number to filter by
        in: query
        name: phone_number
        type: string
      - description: Gender to filter by
        in: query
        name: gender
        type: string
      - default: 10
        description: Number of users to return per page
        in: query
        name: limit
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved users
          schema:
            $ref: '#/definitions/user.GetAllUsersResponse'
        "400":
          description: Invalid request parameters
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - user
  /api/user/delete/{id}:
    delete:
      description: Marks a user profile as deleted by setting the deleted_at timestamp.
      parameters:
      - description: User ID to delete
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete User Profile
      tags:
      - user
  /api/user/getprofile:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves user profile.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.GetProfileResponse'
        "400":
          description: Invalid token
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - user
  /api/user/register:
    post:
      description: Create a new user
      parameters:
      - description: User info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/user.RegisterRequest'
      responses:
        "200":
          description: Registered successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - user
  /api/user/update:
    put:
      description: Update User Profile by Admin
      parameters:
      - description: info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/user.UpdateProfileAdminRequest'
      responses:
        "200":
          description: User profile updated
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update User by Admin
      tags:
      - user
  /api/user/updateprofile:
    put:
      description: Update User profile
      parameters:
      - description: info
        in: body
        name: info
        required: true
        schema:
          $ref: '#/definitions/user.UpdateProfileRequest'
      responses:
        "200":
          description: message
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update User
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: API Gateway
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
